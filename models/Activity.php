<?php
namespace app\models;
use Yii;
use yii\db\ActiveRecord;
/**
 * This is the model class for table "activity".
 *
 * @property int $id
 * @property string $title
 * @property int $started_at
 * @property int $finished_at
 * @property int $created_at
 * @property int $updated_at
 * @property int $author_id
 * @property boolean $cycle
 * @property boolean $main
 * @property User $author
 * @property Calendar[] $calendarRecords
 * @property User[] $users
 */
class Activity extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'activity';
    }
    public function behaviors()
    {
        return [
            'timestampBehavior' => [
                'class' => \yii\behaviors\TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                    'value' => time(),
                ],
            ],
            [
                'class' => \app\behaviors\ActiveRecordCache::class,
                'cacheKeyName' => self::tableName(),
            ],
        ];
    }
    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['started_at', 'finished_at', 'title', 'author_id'], 'required'],
            [['cycle', 'main'], 'boolean'],
            //[['author_id'], 'integer'],
            //[['finished_at'], 'checkEndDate'],
            [['started_at', 'finished_at'], 'date', 'format' => 'php:d.m.Y'],
            [['created_at', 'updated_at'],'integer'],
            [['title'], 'string', 'max' => 255],

            /**
             * Доп условие для проверки
             * Задание 3.1, 3.2
             */
            ['finished_at', 'default', 'value' => function($model, $attribute) {
                return $model->started_at;   }],
            ['finished_at', 'compare', 'compareAttribute' =>
                'started_at', 'operator' => '>=', 'type' => 'number'],

            [['author_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['author_id' => 'id']],
        ];
    }

    /**
     * @param mixed $condition
     * @return mixed|ActiveRecord|null
     */
    public static function findOne($condition)
    {
        if (Yii::$app->cache->exists(self::tableName().'_'.$condition) === false){
            Yii::info('В кеше по этому ключу ничего нет');
            $result = parent::findOne($condition);
            Yii::$app->cache->set(self::tableName().'_'.$condition, $result);
        } else {
            Yii::info('Кеш найден');
            $result = Yii::$app->cache->get(self::tableName().'_'.$condition);
        }
        return $result;
    }

    /**
     * @return bool
     */
    public function beforeValidate()
    {
        //$this->author_id = Yii::$app->user->identity->id;
        return parent::beforeValidate();
    }


    /**
     * @param bool $insert
     * @return bool
     */

    public function beforeSave($insert)
    {
        $this->started_at = Yii::$app->formatter->asTimestamp($this->started_at);
        if (!isset($this->finished_at)) {
            $this->finished_at = $this->started_at;
        } else {
            $this->finished_at = Yii::$app->formatter->asTimestamp($this->finished_at);
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @throws \yii\base\InvalidConfigException
     */
    public function afterFind()
    {
        $this->started_at = Yii::$app->formatter->asDate($this->started_at, 'php:d.m.Y');
        $this->finished_at = Yii::$app->formatter->asDate($this->finished_at, 'php:d.m.Y');
        parent::afterFind();
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'id',
            'title' => 'Название',
            'started_at' => 'Дата и время начала',
            'finished_at' => 'Дата и время конца',
            'author_id' => 'User ID',
            'main' => 'Блокируеще?',
            'cycle' => 'Повторятеся?',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUsers()
    {
        return $this->hasMany(User::className(), ['id' => 'user_id'])
            ->via('calendarRecords');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCalendarRecords()
    {
        return $this->hasMany(Calendar::className(), ['activity_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthor()
    {
        return $this->hasOne(User::className(), ['id' => 'author_id']);
    }
}